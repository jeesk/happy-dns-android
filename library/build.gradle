import java.util.regex.Matcher

apply plugin: 'com.android.library'

def versionName() {
    String config = getProjectDir().getPath() + '/src/main/java/com/qiniu/android/dns/Version.java'
    String fileContents = new File(config).text
    Matcher myMatcher = fileContents =~ /VERSION = "(.+)";/
    String version = myMatcher[0][1]
    println(version)
    return version
}

def versionNameToCode(String version) {
    String v = version.replaceAll(/\./, '')
    return v.toLong()
}

String version = versionName()
int code = versionNameToCode(version)

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'
    defaultConfig {
        //applicationId "com.qiniu.android.dns"
        minSdkVersion 14
        targetSdkVersion 30
        versionCode code
        versionName version
    }

    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    androidTestCompileOnly project(path: ':library')

    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation "com.android.support:support-annotations:28.0.0"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}

task releaseJar(type: Jar, dependsOn: 'build') {
    //指定生成的jar名
    baseName 'happy-dns-' + version
    //从哪里打包class文件
    from('build/intermediates/classes/release/com/qiniu/android/dns/')
    //打包到jar后的目录结构
    into('com/qiniu/android/dns/')
    //去掉不需要打包的目录和文件
    exclude('test/', 'BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude { it.name.startsWith('R$'); }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    task.exclude '**/R.*', '**/R$*.*', '**/BuildConfig.class'
    artifacts.add('archives', task);
}

setProperty('VERSION_NAME', version)
setProperty('VERSION_CODE', code)

apply from: '../mvn_push.gradle'

//apply from: '../jcenter_push.gradle'
